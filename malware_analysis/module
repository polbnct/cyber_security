Terminologies;

C2 - Pertains to the command and control server to which malware communicates

Sample - Pertains to the suspected file we are interested in analyzing

Malware Analyst or Reverse Engineer - pertain to the person conducting malware analysis

Malware Analysis - it is a process of understanding how a suspected malware sample behaves, and its goal.
-- Can be a form of File, URL or compromised Memory

Use case of Malware Analysis

Malware Detection;
- Malware analysis provides IoCs (file hashes, C2) for identification
- Some security products detect malware behaviour through signature

Incident Response Engagement;
- Suspected Artifacts (files, logs, memory) are analyzed
- Determine how identified attack components work

Threat Hunting;
- Hunt for similar threats based on malware behaviour
- Save time re-analyzing similar malware
- Identify new technologies utilized by malware creators

Types of Malware Analysis;

Static Analysis;
- Analysis without running
- Speculate behavior from text strings found in the file
- Use a disassembler or a decompiler to reverse-engineer a binary
- Code and data not easily seen if obfuscated

Dynamic Analysis;
- Analysis by running code in a controlled environment
- Observe behavior while running the file (file system, processes, registry, network, hardware)
- Use disassembler, decompiler and debugger to reverse-engineer a binary
- Code and data executed

Stages in Conducting Malware Analysis;
Fully Automated Analysis -> Static Properties Analysis -> Interactive Behaviour Analysis -> Manual Code Reversing

Fully Automated;
- Run sample in a sandbox and analyze logs
Static Properties;
- Identify IoCs from the file properties and strings
Interactive Behavior;
- Run sample in a controlled environment while monitoring system changes at runtime
Manual Code Reversing;
- Debug the malware and understand capabilities that might not be shown during automated and interactive analysis

--------------------------------------------------

-> Static Analysis
- Gather information about the file without running the sample

-- Hash Tools - Identify Hash (MD5, SHA256)
-> Hashing Tools - HashCalc
Most Commonly used Hash;
- MD5
- SHA1
- SHA256

Linux Command Lines;
- Md5sum
- sha256sum

-- Type of file - .exe, .dll, office document, script, etc
Tools;
- DiE (Detect it Easy)
- PEiD

Known Packer;
- UPX, Themedia
Known Compiler;
- C++, Delphi, Visual Basic

-> Text Strings tools;
- URLs/IPs
- Filenames
- CLSIDs

-> Hex Editor;
- HxD

-> PE File Details;
Tools;
- PE-Bear
- PEStudio

Contains;
- Timestamp
- Architecture
- Digital Signature

-- Obfuscated? Packed?

-> CyberChef 
-- To detect Obfuscated data like base64 data

-- File Detailes - time stamp, compiler, Company Name, Digital Signature
-- Text Strings - URLs, filename, registry
-- PE File details - Imported API calls



